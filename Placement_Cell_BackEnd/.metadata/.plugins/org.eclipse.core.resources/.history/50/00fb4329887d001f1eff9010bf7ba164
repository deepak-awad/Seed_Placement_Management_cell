package com.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.dao.PlacementExecutive;
import com.service.PlacementExecutiveService;

import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/placement-executives")
public class PlacementExecutiveController {

    @Autowired
    private PlacementExecutiveService placementExecutiveService;
    
    //Candidate Forget Password
    @GetMapping("/username/{username}")
    public ResponseEntity<PlacementExecutive> getExecutiveByUsername(@PathVariable String username) {
        Optional<PlacementExecutive> executive = placementExecutiveService.getExecutiveByUsername(username);
        return executive.map(value -> new ResponseEntity<>(value, HttpStatus.OK))
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }
    
 // Executive Login
    @GetMapping("/executive-login/{username}/{password}")
    public ResponseEntity<PlacementExecutive> checkExecutiveByUsernameAndPassword(
            @PathVariable String username, @PathVariable String password) {
        
        Optional<PlacementExecutive> executive = placementExecutiveService.checkExecutiveByUsernameAndPassword(username, password);
        
        if (executive.isPresent()) {
        	HttpSession session = new HttpSession();
        	 session.setAttribute("executive", executive.get());
            return new ResponseEntity<>(executive.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED); // Incorrect credentials
        }
    }



   
}